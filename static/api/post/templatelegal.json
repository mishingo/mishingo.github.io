{
  "results": [{
    "id": "ethdenver",
    "title": "Creating a Users Union on the blockchain at ETH Denver",
    "content": " Vivamus metus arcu, adipiscing molestie, hendrerit at, vulputate vitae, nisl.\n\nAenean lectus. Pellentesque eget nunc. Donec quis orci eget orci vehicula condimentum.\n\nCurabitur in libero ut massa volutpat convallis. Morbi odio odio, elementum eu, interdum eu, tincidunt in, leo. Maecenas pulvinar lobortis est.",
    "image": "/static/images/ethdenver.png",
    "meta": {
      "description": "Took a flight out to Denver to participate at their Ethereum Hackathon and it was incredible. Endless Kombucha fueled my late night frustrations...",
      "published": "2017-07-28T18:31:01Z",
      "author": "Derrik Yerrington"
    }
  }]{
  "results": [{
    "id": "templatelegal",
    "title": "Building a Legal Document Builder in 2 Months",
    "content": "As a company we had success with (Builder) Type applications such as our previous Online Resume Builder. We decided to stray from our niche of employment and take a chance on building a legal document Builder, which we named TemplateLegal.com . \n\n My role was building all aspects of the front-end from the builder, to the dashboard, to the emails. It was a tough two months but we made it happen. \n\n I used Materialize-Css which I am very familiar with, and some minimal Javascript. Most of the business logic was performed on the backend using Laravel. \n\n Our main goal was to be able to swiftly add documents and create a builder for that document on the fly. We decided to use a JSON object and a predefined schema for adding questions, tooltips, and other miscellaneous information. \n\n With the schema defined we created components for any value that would get thrown our way, for example a we created a component simply for a text input. We would make a new component specifically for select inputs, radios, and anything else you could imagine. \n\n  My coworker built the controller that would scaffold together, and in a blade view I would create a fieldset for each step in the builder. Using CSS and a little javascript paired with a router module, I would toggle the visibility of each fieldset to display the questions. \n\n Looking back this was a very rudimentary way of approaching this type of logic, but it served it’s purpose for rapid development and testing out the idea. I would definitely look into using VUE with Vuex next time I attempt to build something similar. State management is key for situations like these, and can make life much easier for us devs. \n\n We launched as planned within two months and incrementally added more documents as our Lawyers worked away and making our templates. It was difficult to turn a profit with CPA’s being so high on adwords. The legal industry has the cash to battle it out for those keywords. I strongly believe we could have tested out other ideas for monetization but the CEO of our company decided to drop it. It continues to live on templatelegal.com and is currently free to use. 
",
    "image": "https://s3.amazonaws.com/localstaffing-resources/templatelegal/img/herosign.png",
    "meta": {
      "description": "We rapidly built a Legal Document Builder and it turned out great!",
      "published": "2017-07-28T18:31:01Z",
      "author": "Miguel Ramos"
    }
  }]
}

}
